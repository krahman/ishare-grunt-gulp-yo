doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title eiShare: Gulp vs Grunt vs Yo

    link(href='http://fonts.googleapis.com/css?family=Open+Sans:300,600', rel='stylesheet', type='text/css')

    // build:css styles/styles.css
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-twilight.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1 ei-Share
        h3 Frontend Development
      
      section.gif.gif--fight
        h2 Grunt vs Gulp

      section.light(data-bespoke-state='green')
        h2 What is Grunt?

      section
        h2 Grunt is a JavaScript task runner

      section.light(data-bespoke-state='green')
        h2.bullet Why use Grunt?
        p.bullet Automation
        p.bullet Less work to perform repetitive tasks

      section
        h3 Single, global Grunt:
        pre.language-bash
          code.
            $ npm install -g grunt-cli

      section
        h3 Configuration over code
        pre.language-javascript
          code.
              grunt.initConfig({
                watch: {
                  files: [''],
                  tasks: ['']
                },
                uglify: {
                  dist: {
                    files: {
                      'dist/app.min.js': 'app/**/*.js'
                    }
                  }
                }
              });

      section
        h3 DEMO
        pre.language-bash
          code.
            $ grunt

      section.light(data-bespoke-state='green')
        h2.bullet Simple config
        p.bullet Common build steps
        p.bullet Designed for small libraries &amp; plugins

      section.gif.gif--omg-grunt
        h1 OMG GRUNT

      section.gif.gif--omg-plugins
        h1 OMG GRUNT PLUGINS

      section.gif.gif--grunt-happy
        h1
          .bullet GRUNT
          .bullet +
          .bullet BOWER
          .bullet +
          .bullet YEOMAN

      section.gif.gif--well-done

      section.light.gif.gif--gulp(data-bespoke-state='green')
        h1 A CHALLENGER APPEARS

      section.logo.logo--gulp(data-bespoke-state='white')

      section.light(data-bespoke-state='green')
        h2 What is Gulp?

      section.light(data-bespoke-state='green')
        li Stream-based build system
        li Code over configuration
        li Small, idiomatic Node modules
        li Really simple, elegant API

      section
        h3 Single, global Gulp:
        pre.language-bash
          code.
            $ npm install -g gulp

      section
        h2.bullet Basic Gulpfile
        pre.bullet.language-javascript
          code.
            var gulp = require('gulp');
            var plugins = require('gulp-load-plugins')();
            var reporters = require('jasmine-reporters');
            var runSequence = require('run-sequence');
            var sh = require('shelljs');
            var del = require('del');

        pre.bullet.language-javascript
          code.
            gulp.task('clean', del.bind(null, ['.tmp', 'dist']));

      section
        pre.bullet.language-javascript
          code.
            gulp.task('html', function () {
                var assets = plugins.useref.assets();
                return gulp.src('www/index.html')
                    .pipe(assets)
                    .pipe(plugins.if('*.js', plugins.uglify({preserveComments: 'some'})))
                    .pipe(plugins.if('*.css', plugins.csso()))
                    .pipe(assets.restore())
                    .pipe(plugins.useref())
                    .pipe(gulp.dest('dist'))
                    .pipe(plugins.vulcanize({ dest: 'dist', strip: true }))
                    .pipe(plugins.size({title: 'html'}));
            });
      section
        h2.bullet Gulp tasks run from terminal
        pre.bullet.language-bash
          $ gulp clean
          $ gulp copy
          $ gulp html

      section.gif.gif--gulp-api
        h1.bullet LET'S LEARN THE GULP API
        h2.bullet It's not too hard.

      section
        h2.bullet gulp.task
        pre.bullet.language-javascript
          code.
            gulp.task('name', ['deps'], function(done) {

              return stream || promise;
              // ...or, call done()

            });

      section
        h2.bullet gulp.watch
        pre.bullet.language-javascript
          code.
            gulp.watch('src/**/*.js', ['test', 'compile']);

      section
        h2.bullet gulp.src
        h3.bullet Returns a readable stream
        pre.bullet.language-javascript
          code.
            gulp.src(['src/**/*.js', 'test/spec/**/*.js'])

      section
        h2.bullet gulp.dest
        h3.bullet Returns a "through stream"
        pre.bullet.language-javascript
          code.
            gulp.src('src')
              .pipe(...)
              .pipe(gulp.dest('dist'));
        br
        p.bullet Yes, that means you can keep piping!

      section.gif.gif--thats-it
        h2.bullet task, watch, src, dest
        h1.bullet That's it.
      
      section.light(data-bespoke-state='green')
        h2 So...
        h3 What's happening with Yeoman?

      section
        h3.bullet There's already an official generator for Gulp
        h1.bullet <a href="https://github.com/yeoman/generator-gulp-webapp">generator-gulp-webapp</a>

      section.gif.gif--gulp-is-awesome
        h1.bullet THE YEOMAN TEAM AGREES
        h2.bullet Gulp is awesome.
        h3.bullet (I agree too)

      section.gif.gif--future
        h1.bullet THE FUTURE
        
      section
        h1 Thank you!
        
    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild
